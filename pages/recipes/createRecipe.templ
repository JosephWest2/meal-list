package recipes

import (
	"josephwest2/meal-list/lib/db"
    "strconv"
)

templ createRecipe(categories []db.RecipeCategory, imageNames []string) {
    <h2>Create Recipe</h2>
    <div class="col">
        <label for="name">Recipe Name:</label>
        <input type="text" id="name" name="name">
        <label for="category">Category:</label>
        <select id="category" name="category">
        for _, category := range categories {
            <option value={strconv.FormatUint(uint64(category.ID), 10)}>{category.Name}</option>
        }
        </select>
        <label for="directions">Directions</label>
        <textarea id="directions" name="directions" rows="8" cols="50"></textarea>
        <label for="imagename">Image Name</label>
        <input list="imagename" name="imagename">
        <datalist id="imagename">
        for _, imageName := range imageNames {
            <option value={imageName}></option>
        }
        </datalist>
        <label for="recipesourceurl">Recipe Source URL</label>
        <input type="text" id="recipesourceurl" name="recipesourceurl">
        <button class="btn" onclick="createRecipe()">Create</button>
    </div>

    <script>
        async function addIngredientToRecipe() {
            
        }
        async function createRecipe() {
            const nameElement = document.getElementById;
            const name = nameElement.value;
            const categoryElement = document.getElementById("category");
            const category = categoryElement.value;
            const directionsElement = document.getElementById("directions")
            const directions = directionsElement.value;
            const imagenameElement = document.getElementById("imagename")
            const imagename = imagenameElement.value;
            const recipesourceurlElement = document.getElementById("recipesourceurl")
            const recipesourceurl = recipesourceurlElement.value;

            failedMessage = ""
            if (!name) {
                failedMessage += "name required\n"
            }
            if (!category) {
                failedMessage += "category required\n"
            }
            if (!directions) {
                failedMessage += "directions required\n"
            }
            if (!imagename) {
                failedMessage += "imagename required\n"
            }
            if (failedMessage != "") {
                alert(failedMessage)
                return
            }

            const requestData = {
                name: name,
                category: category,
                directions: directions,
                imagename: imagename,
                recipesourceurl: recipesourceurl
            }
            const response = await fetch("/recipes", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(requestData)
            })

            if (response.ok) {
                alert("Success: ", response.statusText, response.body)
                nameElement.value = nameElement.defaultValue;
                categoryElement.value = categoryElement.defaultValue;
                directionsElement.value = directionsElement.defaultValue;
                imagenameElement.value = imagenameElement.defaultValue;
                recipesourceurlElement.value = recipesourceurlElement.defaultValue;
            } else {
                alert(response.statusText, response.body)
            }
        }
        

    </script>
}
